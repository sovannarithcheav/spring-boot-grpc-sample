import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.google.protobuf.gradle.*

val protobufVersion by extra("3.19.4")
val protobufPluginVersion by extra("0.8.18")
val grpcVersion by extra("1.42.1")

plugins {
	id("org.springframework.boot") version "2.3.0.RELEASE"
	id("io.spring.dependency-management") version "1.0.9.RELEASE"
	id("org.jmailen.kotlinter") version "3.2.0"
	id("maven-publish")
	id("com.google.protobuf") version "0.8.18"
	java
	idea
	kotlin("jvm") version "1.5.0"
	kotlin("plugin.spring") version "1.5.0"
	kotlin("plugin.jpa") version "1.5.0"
}

group = "com.info"
version = "0.0.1-SNAPSHOT"

repositories {
	mavenCentral()
}

allprojects {

	apply {
		plugin("org.jetbrains.kotlin.jvm")
		plugin("org.jmailen.kotlinter")
	}
	repositories {
		mavenCentral()
		maven { url = uri("https://repo.spring.io/milestone") }
		maven { url = uri("https://repo.spring.io/snapshot") }
	}
	dependencies {
		implementation("org.jetbrains.kotlin:kotlin-reflect")
		implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	}
	java.sourceCompatibility = JavaVersion.VERSION_11

	tasks.withType<KotlinCompile> {
		kotlinOptions {
			freeCompilerArgs = listOf("-Xjsr305=strict", "-Xjvm-default=all-compatibility")
			jvmTarget = "11"
		}
	}

	tasks.withType<Test> {
		useJUnitPlatform()
	}

	kotlinter {
		reporters = arrayOf("checkstyle", "plain")
		experimentalRules = false
		disabledRules = arrayOf("no-wildcard-imports")
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	} // bundled compiler for proto files

	generateProtoTasks {
		all().forEach { task ->
			task.builtins {
				java { }
				kotlin { }
			}
		}
	} // specification to generate python and kotlin; java generated by default and can be removed, but required in our case because of kotlin

}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("com.google.protobuf:protobuf-kotlin:${protobufVersion}") // generated kotlin code required classes from this lib

	runtimeOnly("io.grpc:grpc-netty-shaded:1.44.1")
	implementation("io.grpc:grpc-stub:1.44.1")
	implementation("io.grpc:grpc-protobuf:1.44.1")
	implementation("io.grpc:grpc-services:1.44.1")
	implementation("io.grpc:grpc-kotlin-stub:1.2.1")
	compileOnly("org.apache.tomcat:annotations-api:6.0.53")

	if (JavaVersion.current().isJava9Compatible) {
		implementation("javax.annotation:javax.annotation-api:+")
	}
}

tasks.withType<KotlinCompile> {
	kotlinOptions {
		freeCompilerArgs = listOf("-Xjsr305=strict", "-Xjvm-default=all-compatibility")
		jvmTarget = "11"
	}
	dependsOn("generateProto")
}
